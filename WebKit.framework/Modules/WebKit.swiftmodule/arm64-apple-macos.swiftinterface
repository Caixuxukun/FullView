// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-macos14.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-concurrency -enable-upcoming-feature IsolatedDefaultValues -enable-bare-slash-regex -module-name WebKit
import Foundation
import Network
import Swift
@_exported import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 14.0, macOS 11.0, *)
extension WebKit.WKPDFConfiguration {
  @_Concurrency.MainActor(unsafe) public var rect: CoreFoundation.CGRect? {
    get
    set
  }
}
@available(iOS 14.0, macOS 11.0, *)
extension WebKit.WKWebView {
  @preconcurrency @_Concurrency.MainActor(unsafe) public func callAsyncJavaScript(_ functionBody: Swift.String, arguments: [Swift.String : Any] = [:], in frame: WebKit.WKFrameInfo? = nil, in contentWorld: WebKit.WKContentWorld, completionHandler: (@_Concurrency.MainActor (Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @preconcurrency @_Concurrency.MainActor(unsafe) public func createPDF(configuration: WebKit.WKPDFConfiguration = .init(), completionHandler: @escaping @_Concurrency.MainActor (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @preconcurrency @_Concurrency.MainActor(unsafe) public func createWebArchiveData(completionHandler: @escaping @_Concurrency.MainActor (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void)
  @preconcurrency @_Concurrency.MainActor(unsafe) public func evaluateJavaScript(_ javaScript: Swift.String, in frame: WebKit.WKFrameInfo? = nil, in contentWorld: WebKit.WKContentWorld, completionHandler: (@_Concurrency.MainActor (Swift.Result<Any, any Swift.Error>) -> Swift.Void)? = nil)
  @preconcurrency @_Concurrency.MainActor(unsafe) public func find(_ string: Swift.String, configuration: WebKit.WKFindConfiguration = .init(), completionHandler: @escaping @_Concurrency.MainActor (WebKit.WKFindResult) -> Swift.Void)
}
@available(iOS 15.0, macOS 12.0, *)
extension WebKit.WKWebView {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func callAsyncJavaScript(_ functionBody: Swift.String, arguments: [Swift.String : Any] = [:], in frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld) async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func pdf(configuration: WebKit.WKPDFConfiguration = .init()) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func evaluateJavaScript(_ javaScript: Swift.String, in frame: WebKit.WKFrameInfo? = nil, contentWorld: WebKit.WKContentWorld) async throws -> Any?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func find(_ string: Swift.String, configuration: WebKit.WKFindConfiguration = .init()) async throws -> WebKit.WKFindResult
  #endif
}
extension WebKit.WKWebsiteDataStore {
  @available(iOS 17.0, macOS 14.0, visionOS 1.0, *)
  @available(watchOS, unavailable)
  @available(tvOS, unavailable)
  @_Concurrency.MainActor(unsafe) public var proxyConfigurations: [Network.ProxyConfiguration] {
    get
    set
  }
}
